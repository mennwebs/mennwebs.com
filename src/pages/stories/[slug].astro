---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Button from '../../components/Button.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import PostPreview from '../../components/PostPreview.astro';
import Subscribe from '../../components/Subscribe.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { slugify } from '../../utils/common-utils';
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components';

export async function getStaticPaths() {
  const posts = (await getCollection('stories')).sort(sortItemsByDateDesc);
  const postCount = posts.length;
  return posts.map((post, index) => ({
    params: { slug: post.slug },
    props: {
      post,
      prevPost: index + 1 !== postCount ? posts[index + 1] : null,
      nextPost: index !== 0 ? posts[index - 1] : null
    }
  }));
}

type Props = { post: CollectionEntry<'stories'>; prevPost: CollectionEntry<'stories'>; nextPost: CollectionEntry<'stories'> };

const { href } = Astro.url;
const { post, prevPost, nextPost } = Astro.props;
const { title, publishDate, updatedDate, excerpt, tags = [], seo, cover, facebookPost } = post.data;
const { Content } = await post.render();
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? excerpt} image={seo?.image ?? cover} pageType='article'>
  <article class='mb-16 sm:mb-24'>
    <header class='mb-8'>
      <h1 class='text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight'>{title}</h1>
      <div class='mt-4 text-sm'>
        <FormattedDate date={publishDate} />
        {
          updatedDate && (
            <>
              {' '}
              <span>
                (Updated on <FormattedDate date={updatedDate} />)
              </span>
            </>
          )
        }
      </div>
    </header>
    <div class='max-w-none prose prose-dante sm:prose-lg'>
      <Image src={cover} alt={title} class='w-full h-auto' />

      <Content />
    </div>

    {
      facebookPost && (
        <div>
          <a
            class='inline-flex mt-8 gap-1.5 sm:mt-12  items-center justify-center font-serif text-sm  italic  text-main whitespace-nowrap transition  hover:underline hover:underline-offset-4 hover:decoration-solid decoration-1'
            href={facebookPost}
            target='_blank'
            rel='noopener noreferrer'
          >
            <Icon name='message' class='w-4 h-4' />
            Facebook Post
          </a>
        </div>
      )
    }

    <div class='mt-8 flex items-center gap-6 text-sm sm:mt-12 sm:text-base'>
      {
        tags.length > 0 && (
          <div class='flex flex-wrap gap-x-5 gap-y-1 text-sm font-serif'>
            {tags.map((tag) => (
              <a class='text-main hover:underline  hover:underline-offset-4 hover:decoration-solid decoration-1' href={`/tags/${slugify(tag)}`}>
                {tag}
              </a>
            ))}
          </div>
        )
      }
      <Button class='copy-url-button ml-auto' aria-label='Copy link' data-url={href} data-tooltip-default='Copy link' data-tooltip-success='Copied'
        >Share</Button
      >
    </div>
  </article>
  {
    (prevPost || nextPost) && (
      <div class='my-16 sm:my-20'>
        <h2 class='mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl'>Read Next</h2>
        {nextPost && <PostPreview post={nextPost} class='mb-10 sm:mb-12' headingLevel='h3' />}
        {prevPost && <PostPreview post={prevPost} class='mb-10 sm:mb-12' headingLevel='h3' />}
      </div>
    )
  }
  <Subscribe class='my-16 sm:my-24' />
</BaseLayout>

<script>
  document.addEventListener('astro:page-load', () => {
    const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement;
    copyUrlButton?.addEventListener('click', async () => {
      await copyUrl(copyUrlButton);
    });

    async function copyUrl(button: HTMLButtonElement) {
      let url = button.getAttribute('data-url') || '';
      let label = button.innerText;
      await navigator.clipboard.writeText(url);
      button.innerText = 'Link Copied';
      setTimeout(() => {
        button.innerText = label;
      }, 2500);
    }

    for (var e = document.body.getElementsByTagName('a'), t = e.length, n = 0; n < t; n++) {
      new URL(e[n].href).origin !== location.origin && e[n].setAttribute('target', '_blank');
    }
  });
</script>
